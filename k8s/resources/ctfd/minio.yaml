#@ load("@ytt:data", "data")

#@ domain = data.values.domain
#@ internal_domain = data.values.internal_domain

#@ namespace = "ctfd"
#@ name = "minio"
#@ category = "ctfd"

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: #@ namespace
  name: #@ name
  labels:
    app.kubernetes.io/name: #@ name
    app.kubernetes.io/part-of: #@ category
spec:
  replicas: 1
  serviceName: #@ name
  selector:
    matchLabels:
      app.kubernetes.io/name: #@ name
      app.kubernetes.io/part-of: #@ category
  template:
    metadata:
      labels:
        app.kubernetes.io/name: #@ name
        app.kubernetes.io/part-of: #@ category
    spec:
      containers:
      - name: #@ name
        image: "quay.io/minio/minio:latest"
        args:
          - "server"
          - "/data"
        env:
          - name: MINIO_CONSOLE_ADDRESS
            value: ":9001"
          - name: MINIO_ROOT_USER
            value: "admin"
          - name: MINIO_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ctfd-secrets
                key: minio-root-password
        resources:
          requests:
            cpu: "200m"
          limits:
            cpu: "1200m"
            memory: "512Mi"
        volumeMounts:
        - name: minio-data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: minio-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: managed-csi
      resources:
        requests:
          storage: 8Gi
---
apiVersion: v1
kind: Service
metadata:
  namespace: #@ namespace
  name: #@ name
  labels:
    app.kubernetes.io/name: #@ name
    app.kubernetes.io/part-of: #@ category
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: #@ name
  ports:
  - port: 9000
---
apiVersion: v1
kind: Service
metadata:
  namespace: #@ namespace
  name: #@ name + "-console"
  labels:
    app.kubernetes.io/name: #@ name + "-console"
    app.kubernetes.io/part-of: #@ category
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: #@ name
  ports:
  - port: 9001
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: #@ namespace
  name: #@ name
  labels:
    app.kubernetes.io/name: #@ name
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    #! allow for large uploads to minio
    nginx.ingress.kubernetes.io/proxy-body-size: 512m
spec:
  tls:
  - secretName: le-ctf-2023-keypair
  rules:
  - host: #@ "minio." + domain
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: "minio"
            port:
              number: 9000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: #@ namespace
  name: #@ name + "-console"
  labels:
    app.kubernetes.io/name: #@ name
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    #! Require authorization to access the service
    nginx.ingress.kubernetes.io/auth-signin: #@ "https://" + internal_domain + "/oauth2/start"
    nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.auth.svc.cluster.local:4180/oauth2/auth
spec:
  tls:
  - secretName: le-admin-ctf-2023-keypair
  rules:
  - host: #@ "minio." + internal_domain
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: "minio-console"
            port:
              number: 9001
